SELECT
  project_id,
  job_id,
  query,
  reservation_id,
  EXTRACT(DATE FROM creation_time) AS creation_date,
  TIMESTAMP_DIFF(end_time, start_time, SECOND) AS job_duration_seconds,
  MAX(TIMESTAMP_DIFF(end_time, start_time, SECOND)) AS max_duration_seconds,
  (TIMESTAMP_DIFF(end_time, start_time, SECOND))/7 AS Average_duration_seconds,
  job_type,
  user_email,
  total_bytes_billed,
 
  -- Average slot utilization per job is calculated by dividing total_slot_ms by the millisecond duration of the job
 
  SAFE_DIVIDE(job.total_slot_ms,(TIMESTAMP_DIFF(job.end_time, job.start_time, MILLISECOND))) AS job_avg_slots,
 
  -- Determine the max number of slots used at ANY stage in the query.
  -- The average slots might be 55. But a single stage might spike to 2000 slots.
  -- This is important to know when estimating number of slots to purchase.
 
  MAX(SAFE_DIVIDE(unnest_job_stages.slot_ms,unnest_job_stages.end_ms - unnest_job_stages.start_ms)) AS jobstage_max_slots,
-- Check if there's a job that requests more units of works (slots). If so you need more slots.
  -- estimated_runnable_units = Units of work that can be scheduled immediately.
  -- Providing additional slots for these units of work accelerates the query,
  -- if no other query in the reservation needs additional slots.
 
  MAX(unnest_timeline.estimated_runnable_units) AS estimated_runnable_units
FROM hsbc-10534429-fdreu-prod.`region-europe-west2`.INFORMATION_SCHEMA.JOBS AS job
  CROSS JOIN UNNEST(job_stages) as unnest_job_stages
  CROSS JOIN UNNEST(timeline) AS unnest_timeline
WHERE project_id = 'hsbc-10534429-fdreu-prod'
  AND statement_type != 'SCRIPT'
  AND job_type = 'QUERY'
  AND DATE(creation_time) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) AND CURRENT_DATE()
GROUP BY 1,2,3,4,5,6,8,9,10,11,12
ORDER BY job_id;
